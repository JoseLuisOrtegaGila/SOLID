class Notificador
{
    public void EnviarEmail(string mensaje)
    {
        Console.WriteLine($"Enviando Email: {mensaje}");
    }
}

class Pedido : Notificador
{
    public void ConfirmarPedido()
    {
        Console.WriteLine("Pedido confirmado.");
        EnviarEmail("Tu pedido ha sido confirmado."); // ‚ùå Dependencia directa
    }
}

üö® Problemas de alto acoplamiento:
La clase Pedido est√° atada a Notificador

No puede cambiar f√°cilmente el mecanismo de notificaci√≥n (ejemplo: cambiar email por SMS).

Si Notificador cambia su implementaci√≥n, Pedido tambi√©n se ver√° afectada.

Dificulta la reutilizaci√≥n y pruebas

No se puede reutilizar Pedido sin Notificador.

No se puede probar Pedido sin que se ejecuten m√©todos de Notificador.


Soluci√≥n: Bajo acoplamiento con inyecci√≥n de dependencias
En lugar de usar herencia, usamos composici√≥n e interfaces para desacoplar las clases.

interface INotificador
{
    void Enviar(string mensaje);
}

class EmailNotificador : INotificador
{
    public void Enviar(string mensaje)
    {
        Console.WriteLine($"Enviando Email: {mensaje}");
    }
}

class Pedido
{
    private readonly INotificador _notificador;

    public Pedido(INotificador notificador)
    {
        _notificador = notificador;
    }

    public void ConfirmarPedido()
    {
        Console.WriteLine("Pedido confirmado.");
        _notificador.Enviar("Tu pedido ha sido confirmado.");
    }
}



